compiled - can be compiled,go tool can run file directly without virtual machine 
           executables are different for operating system 



what - systems app to web apps - cloud 
       already in production 

missing - no try catchy lex er does a lot of work   


types - 
       
| **Category**                     | **Type**                                                                             | **Example**                             |
| -------------------------------- | ------------------------------------------------------------------------------------ | --------------------------------------- |
| **Boolean**                      | `bool`                                                                               | `true`, `false`                         |
| **Numeric – Integer (signed)**   | `int`, `int8`, `int16`, `int32`, `int64`                                             | `var a int = 10`                        |
| **Numeric – Integer (unsigned)** | `u int`, `uint8` (alias: `byte`), `uint16`, `uint32`, `uint64`, `u int p tr`             | `var b uint8 = 255`                     |
| **Numeric – Floating Point**     | `float32`, `float64`                                                                 | `var pi float64 = 3.14`                 |
| **Numeric – Complex**            | `complex64`, `complex128`                                                            | `z := 2 + 3i`                           |
| **Text**                         | `string`                                                                             | `"Hello, Go!"`                          |
| **Derived / Composite**          | `array`, `slice`, `map`, `struct`, `pointer`, `function`, `channel`, `interface`     | `[]int{1,2,3}`, `map[string]int{"a":1}` |
| **Alias / Special**              | `rune` (alias for `int32`, used for Unicode code points), `byte` (alias for `uint8`) | `var r rune = 'A'`                      |


Basic types → numbers, bool, string.

Composite types → array, slice, map, struct.

Special types → rune, byte, pointer, interface, function.









In Go, bufio is a standard library package (bufio) that provides buffered I/O — it wraps around an io.Reader or io.Writer (like files, stdin, stdout, network connections) to make reading and writing more efficient and convenient.
Why bufio?

Without buffering → every Read or Write call hits the underlying device (slow).
With bufio → data is read/written in chunks (buffered in memory), reducing system calls and improving performance.
| **Function / Type**   | **Purpose**                                         |
| --------------------- | --------------------------------------------------- |
| `bufio.NewReader(r)`  | Wraps an `io.Reader` with buffering (for input).    |
| `bufio.NewWriter(w)`  | Wraps an `io.Writer` with buffering (for output).   |
| `bufio.NewScanner(r)` | Reads input line by line or token by token.         |
| `ReadString('\n')`    | Reads until a delimiter (e.g., newline).            |
| `ReadBytes(delim)`    | Reads until a delimiter and returns a byte slice.   |
| `Writer.Flush()`      | Flushes the buffered data to the underlying writer. |


bufio = buffered input/output package in Go → faster, easier reading/writing of text, files, or streams.
